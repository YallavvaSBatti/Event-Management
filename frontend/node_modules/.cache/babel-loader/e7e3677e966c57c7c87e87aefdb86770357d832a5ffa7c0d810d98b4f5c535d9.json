{"ast":null,"code":"import { Document, Packer, Paragraph, Header, Footer, Table, HeadingLevel, ParagraphChild, TextRun, Tab, ExternalHyperlink, ImageRun, WidthType, TableRow, TableCell, MathRun, AlignmentType } from 'docx';\nimport Color from 'color';\nimport Editor, { BlockType, Command, ControlType, EditorMode, EditorZone, ElementType, IBlock, ICatalogItem, IElement, ImageDisplay, KeyMap, ListStyle, ListType, PageMode, PaperDirection, RowFlex, TableBorder, TdBorder, TdSlash, TextDecorationStyle, TitleLevel, splitText } from '../../../@ScoutEditor/canvas-editor';\n\n// Title mapping\nconst titleLevelToHeadingLevel = {\n  [TitleLevel.FIRST]: HeadingLevel.HEADING_1,\n  [TitleLevel.SECOND]: HeadingLevel.HEADING_2,\n  [TitleLevel.THIRD]: HeadingLevel.HEADING_3,\n  [TitleLevel.FOURTH]: HeadingLevel.HEADING_4,\n  [TitleLevel.FIFTH]: HeadingLevel.HEADING_5,\n  [TitleLevel.SIXTH]: HeadingLevel.HEADING_6\n};\n// Horizontally align the map\nconst RowFlexToAlignmentType = {\n  [RowFlex.LEFT]: AlignmentType.LEFT,\n  [RowFlex.CENTER]: AlignmentType.CENTER,\n  [RowFlex.RIGHT]: AlignmentType.RIGHT,\n  [RowFlex.ALIGNMENT]: AlignmentType.BOTH\n};\n\n// Default constants\nconst DEFAULT_FONT = 'Arial';\nconst DEFAULT_FONT_SIZE = 12; // 12pt\nconst DEFAULT_COLOR = '000000'; // Black\nconst DEFAULT_MARGIN = 1440; // 1 inch in twips (72pt)\n\n/**\r\n* @typedef {(sizey: number) => number} PxToPtHandler\r\n*/\n\n/** @type {PxToPtHandler} */\nlet pxToPtHandler = size => {\n  const px = size || 16; // default to 16 px if not provided\n  const pt = px * 0.75; // Convert px to pt\n  return Math.round(pt * 10) / 10; // Optional: round to 1 decimal\n};\nfunction base64ToUint8Array(base64) {\n  const binaryString = atob(base64);\n  const bytes = new Uint8Array(binaryString.length);\n  for (let i = 0; i < binaryString.length; i++) {\n    bytes[i] = binaryString.charCodeAt(i);\n  }\n  return bytes;\n}\nfunction convertElementToParagraphChild(element) {\n  if (element.type === ElementType.IMAGE) {\n    let imageData = element.value;\n\n    // Validate image data exists\n    if (!imageData) {\n      console.warn('Empty image data');\n      return new TextRun('[MISSING IMAGE]');\n    }\n\n    // Handle different image input formats\n    if (typeof imageData === 'string') {\n      // Process data URLs\n      if (imageData.startsWith('data:image')) {\n        const matches = imageData.match(/^data:(image\\/\\w+);base64,/);\n        if (!matches || matches.length < 2) {\n          throw new Error('Invalid image data URL format');\n        }\n        const mimeType = matches[1];\n        const base64Data = imageData.split(',')[1];\n\n        // Validate base64 data\n        if (!/^[A-Za-z0-9+/=]+$/.test(base64Data)) {\n          throw new Error('Invalid base64 image data');\n        }\n\n        // Convert to Uint8Array\n        const buffer = base64ToUint8Array(base64Data);\n        return new ImageRun({\n          data: buffer,\n          transformation: {\n            width: Math.min(2000, element.width || 100),\n            // Limit max width\n            height: Math.min(2000, element.height || 100) // Limit max height\n          },\n          contentType: mimeType\n        });\n      }\n    }\n  }\n  if (element.type === ElementType.HYPERLINK) {\n    var _element$valueList;\n    return new ExternalHyperlink({\n      children: [new TextRun({\n        text: (_element$valueList = element.valueList) === null || _element$valueList === void 0 ? void 0 : _element$valueList.map(child => child.value).join(''),\n        style: 'Hyperlink'\n      })],\n      link: element.url\n    });\n  }\n  if (element.type === ElementType.TAB) {\n    return new TextRun({\n      children: [new Tab()],\n      spacing: {\n        after: 200\n      }\n    });\n  }\n  if (element.type === ElementType.LATEX) {\n    return new MathRun(element.value);\n  }\n  console.log(getHexColor(element.color));\n  return new TextRun({\n    font: element.font || 'Arial',\n    text: element.value,\n    bold: element.bold,\n    size: `${pxToPtHandler(element.size)}pt`,\n    color: getHexColor(element.color),\n    italics: element.italic,\n    strike: element.strikeout,\n    highlight: element.highlight ? Color(element.highlight).hex() : undefined,\n    superScript: element.type === ElementType.SUPERSCRIPT,\n    subScript: element.type === ElementType.SUBSCRIPT,\n    underline: element.underline ? {} : undefined\n  });\n}\n// DocxChildren represents an array of Paragraph or Table objects\nfunction convertElementListToDocxChildren(elementList) {\n  const children = [];\n  let paragraphChild = [];\n  let alignment = undefined;\n  function appendParagraph() {\n    console.log('appendParagraph', paragraphChild);\n    console.log(alignment);\n    if (paragraphChild.length) {\n      children.push(new Paragraph({\n        alignment,\n        children: paragraphChild\n      }));\n      paragraphChild = [];\n      alignment = undefined;\n    }\n  }\n  for (let e = 0; e < elementList.length; e++) {\n    const element = elementList[e];\n    console.log('element', element);\n    if (element.type === ElementType.TITLE) {\n      var _valueList$;\n      appendParagraph();\n      const valueList = element.valueList || [];\n      const rowFlex = (_valueList$ = valueList[0]) === null || _valueList$ === void 0 ? void 0 : _valueList$.rowFlex;\n      children.push(new Paragraph({\n        heading: titleLevelToHeadingLevel[element.level],\n        alignment: rowFlex ? RowFlexToAlignmentType[rowFlex] : undefined,\n        children: valueList.map(child => convertElementToParagraphChild(child))\n      }));\n    } else if (element.type === ElementType.IMAGE) {\n      appendParagraph();\n      // Add the image as a paragraph\n      children.push(new Paragraph({\n        alignment: element.rowFlex ? RowFlexToAlignmentType[element.rowFlex] : undefined,\n        children: [convertElementToParagraphChild(element)]\n      }));\n      // Add a new empty paragraph after the image\n      children.push(new Paragraph({\n        children: [new TextRun('').break]\n      }));\n    } else if (element.type === ElementType.LIST) {\n      appendParagraph(); // Separate list from previous content\n\n      const valueList = element.valueList || [];\n      const isDecimal = element.listStyle === ListStyle.DECIMAL;\n      valueList.reduce((count, cur) => {\n        if (cur.value !== '\\n') {\n          cur.value.replace(/^\\n/, '') // Remove leading newline\n          .split('\\n') // Handle multiline entries\n          .forEach(text => {\n            children.push(new Paragraph({\n              alignment: cur.rowFlex ? RowFlexToAlignmentType[cur.rowFlex] : undefined,\n              children: [new TextRun({\n                font: cur.font || 'Arial',\n                text: `${isDecimal ? `${++count}. ` : `â€¢ `}${text}`,\n                bold: cur.bold,\n                italics: cur.italic,\n                underline: cur.underline ? {} : undefined,\n                strike: cur.strikeout,\n                size: cur.size ? `${pxToPtHandler(cur.size)}pt` : undefined,\n                color: getHexColor(cur.color),\n                highlight: cur.highlight ? getHexColor(cur.highlight) : undefined,\n                superScript: element.type === ElementType.SUPERSCRIPT,\n                subScript: element.type === ElementType.SUBSCRIPT\n              })],\n              spacing: {\n                after: 200\n              }\n            }));\n          });\n        } else if (cur.value === '\\n') {\n          // Single newline - add line break if we have content\n          if (paragraphChild.length > 0) {\n            paragraphChild.push(new TextRun({\n              text: '',\n              break: 1\n            }));\n          }\n        } else if (cur.value === '\\n\\n') {\n          // Double newline - force new paragraph\n          appendParagraph();\n          children.push(new Paragraph({\n            children: [new TextRun({\n              text: ''\n            })],\n            spacing: {\n              after: 200\n            }\n          }));\n        }\n        return count;\n      }, 0);\n    } else if (element.type === ElementType.TABLE) {\n      appendParagraph();\n      const {\n        trList\n      } = element;\n      const tableRowList = [];\n      for (let r = 0; r < trList.length; r++) {\n        const tdList = trList[r].tdList;\n        const tableCellList = [];\n        for (let c = 0; c < tdList.length; c++) {\n          const td = tdList[c];\n          tableCellList.push(td.value === '\\n' ? new TableCell({\n            columnSpan: td.colspan,\n            rowSpan: td.rowspan,\n            children: [new TextRun({\n              text: '',\n              break: 1\n            })]\n          }) : new TableCell({\n            columnSpan: td.colspan,\n            rowSpan: td.rowspan,\n            children: convertElementListToDocxChildren(td.value) || []\n          }));\n        }\n        tableRowList.push(new TableRow({\n          children: tableCellList\n        }));\n      }\n      children.push(new Table({\n        rows: tableRowList,\n        width: {\n          size: '100%',\n          type: WidthType.PERCENTAGE\n        }\n      }));\n    } else if (element.type === ElementType.DATE) {\n      var _valueList$2;\n      const valueList = element.valueList || [];\n      const rowFlex = (_valueList$2 = valueList[0]) === null || _valueList$2 === void 0 ? void 0 : _valueList$2.rowFlex;\n      if (rowFlex && !alignment) {\n        var _element$rowFlex;\n        alignment = RowFlexToAlignmentType === null || RowFlexToAlignmentType === void 0 ? void 0 : RowFlexToAlignmentType[(_element$rowFlex = element === null || element === void 0 ? void 0 : element.rowFlex) !== null && _element$rowFlex !== void 0 ? _element$rowFlex : RowFlex.LEFT];\n      }\n      paragraphChild.push(...valueList.map(child => convertElementToParagraphChild(child)));\n    } else {\n      if (element.value == '\\n') {\n        // Single newline - add line break if we have content\n        if (paragraphChild.length > 0) {\n          paragraphChild.push(new TextRun({\n            text: '',\n            break: 1\n          }));\n        }\n      } else if (element.value == '\\n\\n') {\n        // Double newline - force new paragraph\n        appendParagraph();\n        children.push(new Paragraph({\n          children: [new TextRun({\n            text: ''\n          })],\n          spacing: {\n            after: 200\n          }\n        }));\n        // Add space after paragraph\n      } else {\n        console.log('value', element.rowFlex);\n        console.log(\"alignment\", alignment);\n        //  console.log();\n\n        if (element.rowFlex && !alignment) {\n          let rowFlexValue = (element === null || element === void 0 ? void 0 : element.rowFlex) === 'alignment' ? RowFlex.LEFT : element === null || element === void 0 ? void 0 : element.rowFlex;\n          alignment = (RowFlexToAlignmentType === null || RowFlexToAlignmentType === void 0 ? void 0 : RowFlexToAlignmentType[rowFlexValue]) || AlignmentType.LEFT;\n        } else {\n          let rowFlexValue = (element === null || element === void 0 ? void 0 : element.rowFlex) === 'alignment' ? RowFlex.LEFT : element === null || element === void 0 ? void 0 : element.rowFlex;\n          alignment = (RowFlexToAlignmentType === null || RowFlexToAlignmentType === void 0 ? void 0 : RowFlexToAlignmentType[rowFlexValue]) || AlignmentType.LEFT;\n        }\n        paragraphChild.push(convertElementToParagraphChild(element));\n      }\n    }\n  }\n  appendParagraph();\n  return children;\n}\n/**\r\n* @typedef {Object} IExportDocxOption\r\n* @property {string} fileName - The name of the file to export.\r\n*/\n\nexport function createDocumentByData(data) {\n  const {\n    header,\n    main,\n    footer\n  } = data;\n  return new Document({\n    creator: 'Your Application',\n    styles: {\n      paragraphStyles: [{\n        id: \"Normal\",\n        name: \"Normal\",\n        run: {\n          size: 24,\n          // 12pt\n          font: \"Arial\"\n        },\n        paragraph: {\n          spacing: {\n            line: 276\n          } // 1.15 line spacing\n        }\n      }]\n    },\n    sections: [{\n      properties: {\n        page: {\n          margin: {\n            top: 1440,\n            // 100 * 10 twips\n            right: 1440,\n            // 80 * 10 twips\n            bottom: 1440,\n            // 100 * 10 twips\n            left: 1440 // 80 * 10 twips\n          }\n        }\n      },\n      headers: {\n        default: new Header({\n          children: convertElementListToDocxChildren(header || [])\n        })\n      },\n      footers: {\n        default: new Footer({\n          children: convertElementListToDocxChildren(footer || [])\n        })\n      },\n      children: convertElementListToDocxChildren(main || [])\n    }]\n  });\n}","map":{"version":3,"names":["Document","Packer","Paragraph","Header","Footer","Table","HeadingLevel","ParagraphChild","TextRun","Tab","ExternalHyperlink","ImageRun","WidthType","TableRow","TableCell","MathRun","AlignmentType","Color","Editor","BlockType","Command","ControlType","EditorMode","EditorZone","ElementType","IBlock","ICatalogItem","IElement","ImageDisplay","KeyMap","ListStyle","ListType","PageMode","PaperDirection","RowFlex","TableBorder","TdBorder","TdSlash","TextDecorationStyle","TitleLevel","splitText","titleLevelToHeadingLevel","FIRST","HEADING_1","SECOND","HEADING_2","THIRD","HEADING_3","FOURTH","HEADING_4","FIFTH","HEADING_5","SIXTH","HEADING_6","RowFlexToAlignmentType","LEFT","CENTER","RIGHT","ALIGNMENT","BOTH","DEFAULT_FONT","DEFAULT_FONT_SIZE","DEFAULT_COLOR","DEFAULT_MARGIN","pxToPtHandler","size","px","pt","Math","round","base64ToUint8Array","base64","binaryString","atob","bytes","Uint8Array","length","i","charCodeAt","convertElementToParagraphChild","element","type","IMAGE","imageData","value","console","warn","startsWith","matches","match","Error","mimeType","base64Data","split","test","buffer","data","transformation","width","min","height","contentType","HYPERLINK","_element$valueList","children","text","valueList","map","child","join","style","link","url","TAB","spacing","after","LATEX","log","getHexColor","color","font","bold","italics","italic","strike","strikeout","highlight","hex","undefined","superScript","SUPERSCRIPT","subScript","SUBSCRIPT","underline","convertElementListToDocxChildren","elementList","paragraphChild","alignment","appendParagraph","push","e","TITLE","_valueList$","rowFlex","heading","level","break","LIST","isDecimal","listStyle","DECIMAL","reduce","count","cur","replace","forEach","TABLE","trList","tableRowList","r","tdList","tableCellList","c","td","columnSpan","colspan","rowSpan","rowspan","rows","PERCENTAGE","DATE","_valueList$2","_element$rowFlex","rowFlexValue","createDocumentByData","header","main","footer","creator","styles","paragraphStyles","id","name","run","paragraph","line","sections","properties","page","margin","top","right","bottom","left","headers","default","footers"],"sources":["D:/assignment/v0-event-booking-platform-main/frontend/src/components/Category.js"],"sourcesContent":["import {\r\n    Document,\r\n    Packer,\r\n    Paragraph,\r\n    Header,\r\n    Footer,\r\n    Table,\r\n    HeadingLevel,\r\n    ParagraphChild,\r\n    TextRun,\r\n    Tab,\r\n    ExternalHyperlink,\r\n    ImageRun,\r\n    WidthType,\r\n    TableRow,\r\n    TableCell,\r\n    MathRun,\r\n    AlignmentType\r\n  } from 'docx'\r\n  \r\n  \r\n import Color from 'color'\r\n  import Editor, {\r\n    BlockType,\r\n    Command,\r\n    ControlType,\r\n    EditorMode,\r\n    EditorZone,\r\n    ElementType,\r\n    IBlock,\r\n    ICatalogItem,\r\n    IElement,\r\n    ImageDisplay,\r\n    KeyMap,\r\n    ListStyle,\r\n    ListType,\r\n    PageMode,\r\n    PaperDirection,\r\n    RowFlex,\r\n    TableBorder,\r\n    TdBorder,\r\n    TdSlash,\r\n    TextDecorationStyle,\r\n    TitleLevel,\r\n    splitText\r\n  }  from '../../../@ScoutEditor/canvas-editor';\r\n  \r\n  \r\n  \r\n  \r\n  // Title mapping\r\nconst titleLevelToHeadingLevel = {\r\n [TitleLevel.FIRST]: HeadingLevel.HEADING_1,\r\n [TitleLevel.SECOND]: HeadingLevel.HEADING_2,\r\n [TitleLevel.THIRD]: HeadingLevel.HEADING_3,\r\n [TitleLevel.FOURTH]: HeadingLevel.HEADING_4,\r\n [TitleLevel.FIFTH]: HeadingLevel.HEADING_5,\r\n [TitleLevel.SIXTH]: HeadingLevel.HEADING_6\r\n}\r\n// Horizontally align the map\r\nconst RowFlexToAlignmentType = {\r\n [RowFlex.LEFT]: AlignmentType.LEFT,\r\n [RowFlex.CENTER]: AlignmentType.CENTER,\r\n [RowFlex.RIGHT]: AlignmentType.RIGHT,\r\n [RowFlex.ALIGNMENT]: AlignmentType.BOTH\r\n}\r\n\r\n\r\n// Default constants\r\nconst DEFAULT_FONT = 'Arial';\r\nconst DEFAULT_FONT_SIZE = 12; // 12pt\r\nconst DEFAULT_COLOR = '000000'; // Black\r\nconst DEFAULT_MARGIN = 1440; // 1 inch in twips (72pt)\r\n\r\n/**\r\n* @typedef {(sizey: number) => number} PxToPtHandler\r\n*/\r\n\r\n/** @type {PxToPtHandler} */\r\nlet pxToPtHandler = (size) => {\r\n  const px = size || 16;      // default to 16 px if not provided\r\n  const pt = px * 0.75;       // Convert px to pt\r\n  return Math.round(pt * 10) / 10; // Optional: round to 1 decimal\r\n};\r\n\r\nfunction base64ToUint8Array(base64) {\r\n    const binaryString = atob(base64);\r\n    const bytes = new Uint8Array(binaryString.length);\r\n    for (let i = 0; i < binaryString.length; i++) {\r\n        bytes[i] = binaryString.charCodeAt(i);\r\n    }\r\n    return bytes;\r\n}\r\n\r\nfunction convertElementToParagraphChild(element) {\r\nif (element.type === ElementType.IMAGE) {\r\n      \r\n            let imageData = element.value;\r\n            \r\n            // Validate image data exists\r\n            if (!imageData) {\r\n                console.warn('Empty image data');\r\n                return new TextRun('[MISSING IMAGE]');\r\n            }\r\n\r\n            // Handle different image input formats\r\n            if (typeof imageData === 'string') {\r\n                // Process data URLs\r\n                if (imageData.startsWith('data:image')) {\r\n                    const matches = imageData.match(/^data:(image\\/\\w+);base64,/);\r\n                    if (!matches || matches.length < 2) {\r\n                        throw new Error('Invalid image data URL format');\r\n                    }\r\n                    \r\n                    const mimeType = matches[1];\r\n                    const base64Data = imageData.split(',')[1];\r\n                    \r\n                    // Validate base64 data\r\n                    if (!/^[A-Za-z0-9+/=]+$/.test(base64Data)) {\r\n                        throw new Error('Invalid base64 image data');\r\n                    }\r\n\r\n                    // Convert to Uint8Array\r\n                    const buffer = base64ToUint8Array(base64Data);\r\n                    \r\n                    return new ImageRun({\r\n                        data: buffer,\r\n                        transformation: {\r\n                            width: Math.min(2000, element.width || 100),  // Limit max width\r\n                            height: Math.min(2000, element.height || 100), // Limit max height\r\n                        },\r\n                        contentType: mimeType\r\n                    });\r\n                 }\r\n\r\n            }\r\n\r\n          }\r\n\r\n        \r\n if (element.type === ElementType.HYPERLINK) {\r\n   return new ExternalHyperlink({\r\n     children: [\r\n       new TextRun({\r\n         text: element.valueList?.map(child => child.value).join(''),\r\n         style: 'Hyperlink'\r\n       })\r\n     ],\r\n     link: element.url\r\n   })\r\n }\r\n if (element.type === ElementType.TAB) {\r\n   return new TextRun({\r\n     children: [new Tab()], spacing: { after: 200 }\r\n   })\r\n }\r\n if (element.type === ElementType.LATEX) {\r\n   return new MathRun(element.value)\r\n }\r\n console.log( getHexColor(element.color))\r\n return new TextRun({\r\n   font: element.font||'Arial',\r\n   text: element.value,\r\n   bold: element.bold,\r\n   size: `${pxToPtHandler(element.size)}pt`,\r\n   color: getHexColor(element.color),\r\n   italics: element.italic,\r\n   strike: element.strikeout,\r\n   highlight: element.highlight ? Color(element.highlight).hex() : undefined,\r\n   superScript: element.type === ElementType.SUPERSCRIPT,\r\n   subScript: element.type === ElementType.SUBSCRIPT,\r\n   underline: element.underline ? {} : undefined\r\n })\r\n}\r\n// DocxChildren represents an array of Paragraph or Table objects\r\nfunction convertElementListToDocxChildren(\r\n elementList\r\n) {\r\n\r\n  \r\n\r\n \r\n\r\n\r\n const children= []\r\n let paragraphChild = []\r\n let alignment= undefined;\r\n function appendParagraph() {\r\n   console.log('appendParagraph',paragraphChild);\r\n   console.log(alignment)\r\n   if (paragraphChild.length) {\r\n     children.push(\r\n       new Paragraph({\r\n         alignment,\r\n         children: paragraphChild\r\n       })\r\n     )\r\n     paragraphChild = []\r\n     alignment = undefined\r\n   }\r\n }\r\n for (let e = 0; e < elementList.length; e++) {\r\n   const element = elementList[e]\r\n   console.log('element',element)\r\n   if (element.type === ElementType.TITLE) {\r\n     appendParagraph()\r\n     const valueList = element.valueList || []\r\n     const rowFlex = valueList[0]?.rowFlex\r\n     children.push(\r\n       new Paragraph({\r\n         heading: titleLevelToHeadingLevel[element.level],\r\n         alignment: rowFlex ? RowFlexToAlignmentType[rowFlex] : undefined,\r\n         children: valueList.map(child =>\r\n           convertElementToParagraphChild(child)\r\n         )\r\n       })\r\n     )\r\n   } else if (element.type === ElementType.IMAGE) {\r\n     appendParagraph();\r\n     // Add the image as a paragraph\r\n     children.push(\r\n       new Paragraph({\r\n         alignment: element.rowFlex ? RowFlexToAlignmentType[element.rowFlex] : undefined,\r\n         children: [convertElementToParagraphChild(element)]\r\n       })\r\n     );\r\n     // Add a new empty paragraph after the image\r\n     children.push(new Paragraph({ children: [new TextRun('').break] }));\r\n   } else if (element.type === ElementType.LIST) {\r\n     appendParagraph(); // Separate list from previous content\r\n   \r\n     const valueList = element.valueList || [];\r\n     const isDecimal = element.listStyle === ListStyle.DECIMAL;\r\n   \r\n     valueList.reduce((count, cur) => {\r\n       if (cur.value !== '\\n') {\r\n         cur.value\r\n           .replace(/^\\n/, '') // Remove leading newline\r\n           .split('\\n')        // Handle multiline entries\r\n           .forEach(text => {\r\n             children.push(\r\n               new Paragraph({\r\n                 alignment: cur.rowFlex\r\n                   ? RowFlexToAlignmentType[cur.rowFlex]\r\n                   : undefined,\r\n                 children: [\r\n                   new TextRun({\r\n                     font: cur.font||'Arial',\r\n                     text: `${isDecimal ? `${++count}. ` : `â€¢ `}${text}`,\r\n                     bold: cur.bold,\r\n                     italics: cur.italic,\r\n                     underline: cur.underline ? {} : undefined,\r\n                     strike: cur.strikeout,\r\n                     size: cur.size ? `${pxToPtHandler(cur.size)}pt` : undefined,\r\n                     color: getHexColor(cur.color),\r\n                     highlight: cur.highlight ? getHexColor(cur.highlight) : undefined,\r\n                     superScript: element.type === ElementType.SUPERSCRIPT,\r\n                     subScript: element.type === ElementType.SUBSCRIPT\r\n                   })\r\n                 ], spacing: { after: 200 }\r\n               })\r\n             );\r\n           });\r\n       }else if (cur.value  === '\\n') {\r\n         // Single newline - add line break if we have content\r\n         if (paragraphChild.length > 0) {\r\n           paragraphChild.push(new TextRun({ text: '', break: 1 }));\r\n         }\r\n       } \r\n       else if (cur.value  === '\\n\\n') {\r\n         // Double newline - force new paragraph\r\n         appendParagraph();\r\n         children.push(new Paragraph({ children: [new TextRun({ text: '' })], spacing: { after: 200 } }));\r\n       }\r\n       return count;\r\n     }, 0);\r\n   } else if (element.type === ElementType.TABLE) {\r\n     appendParagraph()\r\n     const { trList } = element\r\n     const tableRowList = []\r\n     for (let r = 0; r < trList.length; r++) {\r\n       const tdList = trList[r].tdList\r\n       const tableCellList = []\r\n       for (let c = 0; c < tdList.length; c++) {\r\n         const td = tdList[c]\r\n         tableCellList.push(\r\n           td.value === '\\n'\r\n             ? new TableCell({\r\n                 columnSpan: td.colspan,\r\n                 rowSpan: td.rowspan,\r\n                 children: [new TextRun({ text: '', break: 1 })]\r\n               })\r\n             : new TableCell({\r\n                 columnSpan: td.colspan,\r\n                 rowSpan: td.rowspan,\r\n                 children: convertElementListToDocxChildren(td.value) || []\r\n               })\r\n         );\r\n       }\r\n       tableRowList.push(\r\n         new TableRow({\r\n           children: tableCellList\r\n         })\r\n       )\r\n     }\r\n     children.push(\r\n       new Table({\r\n         rows: tableRowList,\r\n         width: {\r\n           size: '100%',\r\n           type: WidthType.PERCENTAGE\r\n         }\r\n       })\r\n     )\r\n   } else if (element.type === ElementType.DATE) {\r\n     const valueList = element.valueList || []\r\n     const rowFlex = valueList[0]?.rowFlex\r\n     if (rowFlex && !alignment) {\r\n       alignment = RowFlexToAlignmentType?.[element?.rowFlex ?? RowFlex.LEFT];\r\n     }\r\n     paragraphChild.push(\r\n       ...valueList.map(child => convertElementToParagraphChild(child))\r\n     )\r\n   } else {\r\n\r\n    \r\n    \r\n     \r\n     if (element.value == '\\n') {\r\n       // Single newline - add line break if we have content\r\n       if (paragraphChild.length > 0) {\r\n         paragraphChild.push(new TextRun({ text: '', break: 1 }));\r\n       }\r\n     } \r\n     else if (element.value == '\\n\\n') {\r\n       // Double newline - force new paragraph\r\n       appendParagraph();\r\n       children.push(new Paragraph({ children: [new TextRun({ text: '' })], spacing: { after: 200 } }));\r\n       // Add space after paragraph\r\n     }\r\n     else {\r\n       console.log('value',element.rowFlex)\r\n       console.log(\"alignment\",alignment)\r\n      //  console.log();\r\n\r\n      \r\n       \r\n       if (element.rowFlex && !alignment) {\r\n         let rowFlexValue = element?.rowFlex === 'alignment' ? RowFlex.LEFT : element?.rowFlex ;\r\n         alignment = RowFlexToAlignmentType?.[rowFlexValue] || AlignmentType.LEFT;\r\n       }else{\r\n         let rowFlexValue = element?.rowFlex === 'alignment' ? RowFlex.LEFT : element?.rowFlex ;\r\n            alignment = RowFlexToAlignmentType?.[rowFlexValue] || AlignmentType.LEFT;\r\n       }\r\n\r\n       paragraphChild.push(convertElementToParagraphChild(element))\r\n     }\r\n   }\r\n }\r\n appendParagraph()\r\n return children\r\n}\r\n/**\r\n* @typedef {Object} IExportDocxOption\r\n* @property {string} fileName - The name of the file to export.\r\n*/\r\n\r\nexport function createDocumentByData(data) {\r\n const { header, main, footer } = data\r\n return new Document({\r\n    creator: 'Your Application',\r\n    styles: {\r\n      paragraphStyles: [{\r\n        id: \"Normal\",\r\n        name: \"Normal\",\r\n        run: {\r\n          size: 24, // 12pt\r\n          font: \"Arial\"\r\n        },\r\n        paragraph: {\r\n          spacing: { line: 276 } // 1.15 line spacing\r\n        }\r\n      }]\r\n    },\r\n    \r\n   sections: [\r\n     {\r\n       properties: {\r\n         page: {\r\n           margin: {\r\n             top: 1440,     // 100 * 10 twips\r\n             right: 1440,    // 80 * 10 twips\r\n             bottom: 1440,  // 100 * 10 twips\r\n             left: 1440,     // 80 * 10 twips\r\n           },\r\n         },\r\n       },\r\n       headers: {\r\n         default: new Header({\r\n           children: convertElementListToDocxChildren(header || [])\r\n         })\r\n       },\r\n       footers: {\r\n         default: new Footer({\r\n           children: convertElementListToDocxChildren(footer || [])\r\n         })\r\n       },\r\n       children: convertElementListToDocxChildren(main || [])\r\n     }\r\n   ]\r\n })\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}